["Grammar", [
  ["Meta", [
    ["Lang", "PEGN"],
    ["MajorVer", "1"],
    ["MinorVer", "0"],
    ["PatchVer", "0"],
    ["PreVer", "alpha"],
    ["Home", "gitlab.com/pegn/spec"],
    ["EndLine", "\n"]
  ]],
  ["Copyright", [
    ["Comment", "2020 Robert S Muhlestein (rwx@robs.io)"],
    ["EndLine", "\n"]
  ]],
  ["Licensed", [
    ["Comment", "Apache-2, CC-BY-4.0"],
    ["EndLine", "\n"]
  ]],
  ["EndLine", "\n"],
  ["Comment", "Note: Assumes scanning by at least one byte at a time."],
  ["EndLine", "\n"],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "Grammar"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["CheckId", "Meta"],
          ["Optional", "?"]
        ]],
        ["Plain", [
          ["CheckId", "Copyright"],
          ["Optional", "?"]
        ]],
        ["Plain", [
          ["CheckId", "Licensed"],
          ["Optional", "?"]
        ]],
        ["EndLine", "\n"],
        ["Plain", [
          ["CheckId", "ComEndLine"],
          ["MinZero", "*"]
        ]],
        ["EndLine", "\n"],
        ["Plain", [
          ["Expression", [
            ["Sequence", [
              ["Plain", [
                ["CheckId", "Definition"]
              ]],
              ["Plain", [
                ["CheckId", "ComEndLine"],
                ["MinZero", "*"]
              ]]
            ]]
          ]],
          ["MinOne", "+"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "Meta"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["String", "# "]
        ]],
        ["Plain", [
          ["CheckId", "Language"]
        ]],
        ["Plain", [
          ["String", " ("]
        ]],
        ["Plain", [
          ["CheckId", "Version"]
        ]],
        ["Plain", [
          ["String", ") "]
        ]],
        ["Plain", [
          ["CheckId", "Home"]
        ]],
        ["Plain", [
          ["CheckId", "EndLine"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "Copyright"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["String", "# Copyright "]
        ]],
        ["Plain", [
          ["CheckId", "Comment"]
        ]],
        ["Plain", [
          ["CheckId", "EndLine"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "Licensed"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["String", "# Licensed under "]
        ]],
        ["Plain", [
          ["CheckId", "Comment"]
        ]],
        ["Plain", [
          ["CheckId", "EndLine"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["ScanDef", [
    ["CheckId", "ComEndLine"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["TokenId", [
            ["ResTokenId", "SP"]
          ]],
          ["MinZero", "*"]
        ]],
        ["Plain", [
          ["Expression", [
            ["Sequence", [
              ["Plain", [
                ["String", "# "]
              ]],
              ["Plain", [
                ["CheckId", "Comment"]
              ]]
            ]]
          ]],
          ["Optional", "?"]
        ]],
        ["Plain", [
          ["CheckId", "EndLine"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["ScanDef", [
    ["CheckId", "Definition"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["CheckId", "NodeDef"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["CheckId", "ScanDef"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["CheckId", "ClassDef"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["CheckId", "TokenDef"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["EndLine", "\n"],
  ["ScanDef", [
    ["CheckId", "Language"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["CheckId", "Lang"]
        ]],
        ["Plain", [
          ["Expression", [
            ["Sequence", [
              ["Plain", [
                ["String", "-"]
              ]],
              ["Plain", [
                ["CheckId", "LangExt"]
              ]]
            ]]
          ]],
          ["Optional", "?"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["ScanDef", [
    ["CheckId", "Version"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["String", "v"]
        ]],
        ["Plain", [
          ["CheckId", "MajorVer"]
        ]],
        ["Plain", [
          ["String", "."]
        ]],
        ["Plain", [
          ["CheckId", "MinorVer"]
        ]],
        ["Plain", [
          ["String", "."]
        ]],
        ["Plain", [
          ["CheckId", "PatchVer"]
        ]],
        ["Plain", [
          ["Expression", [
            ["Sequence", [
              ["Plain", [
                ["String", "-"]
              ]],
              ["Plain", [
                ["CheckId", "PreVer"]
              ]]
            ]]
          ]],
          ["Optional", "?"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "Home"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["Expression", [
            ["Sequence", [
              ["NegLook", [
                ["ClassId", [
                  ["ResClassId", "ws"]
                ]]
              ]],
              ["Plain", [
                ["ClassId", [
                  ["ResClassId", "unipoint"]
                ]]
              ]]
            ]]
          ]],
          ["MinOne", "+"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "Comment"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["Expression", [
            ["Sequence", [
              ["NegLook", [
                ["CheckId", "EndLine"]
              ]],
              ["Plain", [
                ["ClassId", [
                  ["ResClassId", "unipoint"]
                ]],
                ["MinOne", "+"]
              ]]
            ]]
          ]],
          ["MinOne", "+"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "NodeDef"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["CheckId", "CheckId"]
        ]],
        ["Plain", [
          ["TokenId", [
            ["ResTokenId", "SP"]
          ]],
          ["MinOne", "+"]
        ]],
        ["Plain", [
          ["String", "<--"]
        ]],
        ["Plain", [
          ["TokenId", [
            ["ResTokenId", "SP"]
          ]],
          ["MinOne", "+"]
        ]],
        ["Plain", [
          ["CheckId", "Expression"]
        ]]
      ]]
    ]]
  ]],
  ["Comment", "significant"],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "ScanDef"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["CheckId", "CheckId"]
        ]],
        ["Plain", [
          ["TokenId", [
            ["ResTokenId", "SP"]
          ]],
          ["MinOne", "+"]
        ]],
        ["Plain", [
          ["String", "<-"]
        ]],
        ["Plain", [
          ["TokenId", [
            ["ResTokenId", "SP"]
          ]],
          ["MinOne", "+"]
        ]],
        ["Plain", [
          ["CheckId", "Expression"]
        ]]
      ]]
    ]]
  ]],
  ["Comment", "convenient"],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "ClassDef"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["CheckId", "ClassId"]
        ]],
        ["Plain", [
          ["TokenId", [
            ["ResTokenId", "SP"]
          ]],
          ["MinOne", "+"]
        ]],
        ["Plain", [
          ["String", "<-"]
        ]],
        ["Plain", [
          ["TokenId", [
            ["ResTokenId", "SP"]
          ]],
          ["MinOne", "+"]
        ]],
        ["Plain", [
          ["CheckId", "ClassExpr"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "TokenDef"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["CheckId", "TokenId"]
        ]],
        ["Plain", [
          ["TokenId", [
            ["ResTokenId", "SP"]
          ]],
          ["MinOne", "+"]
        ]],
        ["Plain", [
          ["String", "<-"]
        ]],
        ["Plain", [
          ["TokenId", [
            ["ResTokenId", "SP"]
          ]],
          ["MinOne", "+"]
        ]],
        ["EndLine", "\n"],
        ["Plain", [
          ["CheckId", "TokenVal"]
        ]],
        ["Plain", [
          ["Expression", [
            ["Sequence", [
              ["Plain", [
                ["CheckId", "Spacing"]
              ]],
              ["Plain", [
                ["CheckId", "TokenVal"]
              ]]
            ]]
          ]],
          ["MinZero", "*"]
        ]],
        ["EndLine", "\n"],
        ["Plain", [
          ["CheckId", "ComEndLine"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["EndLine", "\n"],
  ["Comment", "lower-case of identifier must be unique within grammar"],
  ["EndLine", "\n"],
  ["ScanDef", [
    ["CheckId", "Identifier"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["CheckId", "CheckId"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["CheckId", "ClassId"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["CheckId", "TokenId"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["EndLine", "\n"],
  ["ScanDef", [
    ["CheckId", "TokenVal"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["CheckId", "Rune"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["TokenId", [
            ["ResTokenId", "SQ"]
          ]]
        ]],
        ["Plain", [
          ["CheckId", "String"]
        ]],
        ["Plain", [
          ["TokenId", [
            ["ResTokenId", "SQ"]
          ]]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "Lang"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["ClassId", [
            ["ResClassId", "upper"]
          ]],
          ["MinMax", [
            ["Min", "2"],
            ["Max", "12"]
          ]]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "LangExt"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["ClassId", [
            ["ResClassId", "visible"]
          ]],
          ["MinMax", [
            ["Min", "1"],
            ["Max", "20"]
          ]]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "MajorVer"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["ClassId", [
            ["ResClassId", "digit"]
          ]],
          ["MinOne", "+"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "MinorVer"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["ClassId", [
            ["ResClassId", "digit"]
          ]],
          ["MinOne", "+"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "PatchVer"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["ClassId", [
            ["ResClassId", "digit"]
          ]],
          ["MinOne", "+"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "PreVer"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["Expression", [
            ["Sequence", [
              ["Plain", [
                ["ClassId", [
                  ["ResClassId", "word"]
                ]]
              ]]
            ]],
            ["Sequence", [
              ["Plain", [
                ["TokenId", [
                  ["ResTokenId", "DASH"]
                ]]
              ]]
            ]]
          ]],
          ["MinOne", "+"]
        ]],
        ["Plain", [
          ["Expression", [
            ["Sequence", [
              ["Plain", [
                ["String", "."]
              ]],
              ["Plain", [
                ["Expression", [
                  ["Sequence", [
                    ["Plain", [
                      ["ClassId", [
                        ["ResClassId", "word"]
                      ]]
                    ]]
                  ]],
                  ["Sequence", [
                    ["Plain", [
                      ["TokenId", [
                        ["ResTokenId", "DASH"]
                      ]]
                    ]]
                  ]]
                ]],
                ["MinOne", "+"]
              ]]
            ]]
          ]],
          ["MinZero", "*"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "CheckId"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["Expression", [
            ["Sequence", [
              ["Plain", [
                ["ClassId", [
                  ["ResClassId", "upper"]
                ]]
              ]],
              ["Plain", [
                ["ClassId", [
                  ["ResClassId", "lower"]
                ]],
                ["MinOne", "+"]
              ]]
            ]]
          ]],
          ["MinOne", "+"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "ClassId"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["CheckId", "ResClassId"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["ClassId", [
            ["ResClassId", "lower"]
          ]]
        ]],
        ["Plain", [
          ["Expression", [
            ["Sequence", [
              ["Plain", [
                ["ClassId", [
                  ["ResClassId", "lower"]
                ]]
              ]]
            ]],
            ["Sequence", [
              ["Plain", [
                ["TokenId", [
                  ["ResTokenId", "UNDER"]
                ]]
              ]],
              ["Plain", [
                ["ClassId", [
                  ["ResClassId", "lower"]
                ]]
              ]]
            ]]
          ]],
          ["MinOne", "+"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "TokenId"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["CheckId", "ResTokenId"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["ClassId", [
            ["ResClassId", "upper"]
          ]]
        ]],
        ["Plain", [
          ["Expression", [
            ["Sequence", [
              ["Plain", [
                ["ClassId", [
                  ["ResClassId", "upper"]
                ]]
              ]]
            ]],
            ["Sequence", [
              ["Plain", [
                ["TokenId", [
                  ["ResTokenId", "UNDER"]
                ]]
              ]],
              ["Plain", [
                ["ClassId", [
                  ["ResClassId", "upper"]
                ]]
              ]]
            ]]
          ]],
          ["MinOne", "+"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "Expression"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["CheckId", "Sequence"]
        ]],
        ["Plain", [
          ["Expression", [
            ["Sequence", [
              ["Plain", [
                ["CheckId", "Spacing"]
              ]],
              ["Plain", [
                ["String", "/"]
              ]],
              ["Plain", [
                ["TokenId", [
                  ["ResTokenId", "SP"]
                ]],
                ["MinOne", "+"]
              ]],
              ["Plain", [
                ["CheckId", "Sequence"]
              ]]
            ]]
          ]],
          ["MinZero", "*"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "ClassExpr"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["CheckId", "Simple"]
        ]],
        ["Plain", [
          ["Expression", [
            ["Sequence", [
              ["Plain", [
                ["CheckId", "Spacing"]
              ]],
              ["Plain", [
                ["String", "/"]
              ]],
              ["Plain", [
                ["TokenId", [
                  ["ResTokenId", "SP"]
                ]],
                ["MinOne", "+"]
              ]],
              ["Plain", [
                ["CheckId", "Simple"]
              ]]
            ]]
          ]],
          ["MinZero", "*"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["EndLine", "\n"],
  ["ScanDef", [
    ["CheckId", "Simple"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["CheckId", "Rune"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["CheckId", "ClassId"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["CheckId", "TokenId"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["CheckId", "Range"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["TokenId", [
            ["ResTokenId", "SQ"]
          ]]
        ]],
        ["Plain", [
          ["CheckId", "String"]
        ]],
        ["Plain", [
          ["TokenId", [
            ["ResTokenId", "SQ"]
          ]]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["EndLine", "\n"],
  ["ScanDef", [
    ["CheckId", "Spacing"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["CheckId", "ComEndLine"],
          ["Optional", "?"]
        ]],
        ["Plain", [
          ["TokenId", [
            ["ResTokenId", "SP"]
          ]],
          ["MinOne", "+"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "Sequence"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["CheckId", "Rule"]
        ]],
        ["Plain", [
          ["Expression", [
            ["Sequence", [
              ["Plain", [
                ["CheckId", "Spacing"]
              ]],
              ["Plain", [
                ["CheckId", "Rule"]
              ]]
            ]]
          ]],
          ["MinZero", "*"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["ScanDef", [
    ["CheckId", "Rule"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["CheckId", "PosLook"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["CheckId", "NegLook"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["CheckId", "Plain"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "Plain"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["CheckId", "Primary"]
        ]],
        ["Plain", [
          ["CheckId", "Quant"],
          ["Optional", "?"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "PosLook"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["String", "&"]
        ]],
        ["Plain", [
          ["CheckId", "Primary"]
        ]],
        ["Plain", [
          ["CheckId", "Quant"],
          ["Optional", "?"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "NegLook"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["String", "!"]
        ]],
        ["Plain", [
          ["CheckId", "Primary"]
        ]],
        ["Plain", [
          ["CheckId", "Quant"],
          ["Optional", "?"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["ScanDef", [
    ["CheckId", "Primary"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["CheckId", "Simple"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["CheckId", "CheckId"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "("]
        ]],
        ["Plain", [
          ["CheckId", "Expression"]
        ]],
        ["Plain", [
          ["String", ")"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["EndLine", "\n"],
  ["ScanDef", [
    ["CheckId", "Quant"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["CheckId", "Optional"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["CheckId", "MinZero"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["CheckId", "MinOne"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["CheckId", "MinMax"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["CheckId", "Count"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "Optional"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["String", "?"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "MinZero"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["String", "*"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "MinOne"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["String", "+"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "MinMax"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["String", "{"]
        ]],
        ["Plain", [
          ["CheckId", "Min"]
        ]],
        ["Plain", [
          ["String", ","]
        ]],
        ["Plain", [
          ["CheckId", "Max"],
          ["Optional", "?"]
        ]],
        ["Plain", [
          ["String", "}"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "Min"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["ClassId", [
            ["ResClassId", "digit"]
          ]],
          ["MinOne", "+"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "Max"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["ClassId", [
            ["ResClassId", "digit"]
          ]],
          ["MinOne", "+"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "Count"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["String", "{"]
        ]],
        ["Plain", [
          ["ClassId", [
            ["ResClassId", "digit"]
          ]],
          ["MinOne", "+"]
        ]],
        ["Plain", [
          ["String", "}"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["EndLine", "\n"],
  ["ScanDef", [
    ["CheckId", "Range"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["CheckId", "AlphaRange"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["CheckId", "IntRange"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["CheckId", "UniRange"]
        ]]
      ]],
      ["EndLine", "\n"],
      ["Sequence", [
        ["Plain", [
          ["CheckId", "BinRange"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["CheckId", "HexRange"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["CheckId", "OctRange"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "UniRange"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["String", "["]
        ]],
        ["Plain", [
          ["CheckId", "Unicode"]
        ]],
        ["Plain", [
          ["String", "-"]
        ]],
        ["Plain", [
          ["CheckId", "Unicode"]
        ]],
        ["Plain", [
          ["String", "]"]
        ]]
      ]]
    ]]
  ]],
  ["Comment", "[u0000-u10FFFF]"],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "AlphaRange"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["String", "["]
        ]],
        ["Plain", [
          ["CheckId", "Letter"]
        ]],
        ["Plain", [
          ["String", "-"]
        ]],
        ["Plain", [
          ["CheckId", "Letter"]
        ]],
        ["Plain", [
          ["String", "]"]
        ]]
      ]]
    ]]
  ]],
  ["Comment", "[a-m] [A-Z]"],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "IntRange"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["String", "["]
        ]],
        ["Plain", [
          ["CheckId", "Integer"]
        ]],
        ["Plain", [
          ["String", "-"]
        ]],
        ["Plain", [
          ["CheckId", "Integer"]
        ]],
        ["Plain", [
          ["String", "]"]
        ]]
      ]]
    ]]
  ]],
  ["Comment", "[0-108] [0-9]"],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "BinRange"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["String", "["]
        ]],
        ["Plain", [
          ["CheckId", "Binary"]
        ]],
        ["Plain", [
          ["String", "-"]
        ]],
        ["Plain", [
          ["CheckId", "Binary"]
        ]],
        ["Plain", [
          ["String", "]"]
        ]]
      ]]
    ]]
  ]],
  ["Comment", "[b101-b1111111110101010]"],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "HexRange"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["String", "["]
        ]],
        ["Plain", [
          ["CheckId", "Hexadec"]
        ]],
        ["Plain", [
          ["String", "-"]
        ]],
        ["Plain", [
          ["CheckId", "Hexadec"]
        ]],
        ["Plain", [
          ["String", "]"]
        ]]
      ]]
    ]]
  ]],
  ["Comment", "[x20-x2F]"],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "OctRange"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["String", "["]
        ]],
        ["Plain", [
          ["CheckId", "Octal"]
        ]],
        ["Plain", [
          ["String", "-"]
        ]],
        ["Plain", [
          ["CheckId", "Octal"]
        ]],
        ["Plain", [
          ["String", "]"]
        ]]
      ]]
    ]]
  ]],
  ["Comment", "[o20-o37]"],
  ["EndLine", "\n"],
  ["EndLine", "\n"],
  ["ScanDef", [
    ["CheckId", "Rune"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["CheckId", "Unicode"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["CheckId", "Binary"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["CheckId", "Hexadec"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["CheckId", "Octal"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "String"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["ClassId", [
            ["ResClassId", "quotable"]
          ]],
          ["MinOne", "+"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "Letter"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["ClassId", [
            ["ResClassId", "alpha"]
          ]]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "Unicode"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["String", "u"]
        ]],
        ["Plain", [
          ["Expression", [
            ["Sequence", [
              ["Plain", [
                ["ClassId", [
                  ["ResClassId", "uphex"]
                ]],
                ["MinMax", [
                  ["Min", "4"],
                  ["Max", "5"]
                ]]
              ]]
            ]],
            ["Sequence", [
              ["Plain", [
                ["String", "10"]
              ]],
              ["Plain", [
                ["ClassId", [
                  ["ResClassId", "uphex"]
                ]],
                ["Count", "4"]
              ]]
            ]]
          ]]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "Integer"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["ClassId", [
            ["ResClassId", "digit"]
          ]],
          ["MinOne", "+"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "Binary"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["String", "b"]
        ]],
        ["Plain", [
          ["ClassId", [
            ["ResClassId", "bindig"]
          ]],
          ["MinOne", "+"]
        ]]
      ]]
    ]]
  ]],
  ["Comment", "b1 == b00000001 (0 pad to closest byte)"],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "Hexadec"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["String", "x"]
        ]],
        ["Plain", [
          ["ClassId", [
            ["ResClassId", "uphex"]
          ]],
          ["MinOne", "+"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "Octal"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["String", "o"]
        ]],
        ["Plain", [
          ["ClassId", [
            ["ResClassId", "octdig"]
          ]],
          ["MinOne", "+"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "EndLine"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["TokenId", [
            ["ResTokenId", "LF"]
          ]]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["TokenId", [
            ["ResTokenId", "CRLF"]
          ]]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["TokenId", [
            ["ResTokenId", "CR"]
          ]]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "ResClassId"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["String", "alphanum"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "alpha"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "any"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "bindig"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "control"]
        ]]
      ]],
      ["EndLine", "\n"],
      ["Sequence", [
        ["Plain", [
          ["String", "digit"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "hexdig"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "lowerhex"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "lower"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "octdig"]
        ]]
      ]],
      ["EndLine", "\n"],
      ["Sequence", [
        ["Plain", [
          ["String", "punct"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "quotable"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "sign"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "uphex"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "upper"]
        ]]
      ]],
      ["EndLine", "\n"],
      ["Sequence", [
        ["Plain", [
          ["String", "visible"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "ws"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "alnum"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "ascii"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "blank"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "cntrl"]
        ]]
      ]],
      ["EndLine", "\n"],
      ["Sequence", [
        ["Plain", [
          ["String", "graph"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "print"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "space"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "word"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "xdigit"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "unipoint"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["EndLine", "\n"],
  ["NodeDef", [
    ["CheckId", "ResTokenId"],
    ["Expression", [
      ["Sequence", [
        ["Plain", [
          ["String", "TAB"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "CRLF"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "CR"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "LFAT"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "SP"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "VT"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "FF"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "NOT"]
        ]]
      ]],
      ["EndLine", "\n"],
      ["Sequence", [
        ["Plain", [
          ["String", "BANG"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "DQ"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "HASH"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "DOLLAR"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "PERCENT"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "AND"]
        ]]
      ]],
      ["EndLine", "\n"],
      ["Sequence", [
        ["Plain", [
          ["String", "SQ"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "LPAREN"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "RPAREN"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "STAR"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "PLUS"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "COMMA"]
        ]]
      ]],
      ["EndLine", "\n"],
      ["Sequence", [
        ["Plain", [
          ["String", "DASH"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "MINUS"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "DOT"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "SLASH"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "COLON"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "SEMI"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "LT"]
        ]]
      ]],
      ["EndLine", "\n"],
      ["Sequence", [
        ["Plain", [
          ["String", "EQ"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "GT"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "QUERY"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "QUESTION"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "AT"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "LBRAKT"]
        ]]
      ]],
      ["EndLine", "\n"],
      ["Sequence", [
        ["Plain", [
          ["String", "BKSLASH"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "RBRAKT"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "CARET"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "UNDER"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "BKTICK"]
        ]]
      ]],
      ["EndLine", "\n"],
      ["Sequence", [
        ["Plain", [
          ["String", "LCURLY"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "LBRACE"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "BAR"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "PIPE"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "RCURLY"]
        ]]
      ]],
      ["EndLine", "\n"],
      ["Sequence", [
        ["Plain", [
          ["String", "RBRACE"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "TILDE"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "UNKNOWN"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "REPLACE"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "MAXRUNE"]
        ]]
      ]],
      ["EndLine", "\n"],
      ["Sequence", [
        ["Plain", [
          ["String", "MAXASCII"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "MAXLATIN"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "LARROWF"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "RARROWF"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "LLARROW"]
        ]]
      ]],
      ["EndLine", "\n"],
      ["Sequence", [
        ["Plain", [
          ["String", "RLARROW"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "LARROW"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "LF"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "RARROW"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "RFAT"]
        ]]
      ]],
      ["EndLine", "\n"],
      ["Sequence", [
        ["Plain", [
          ["String", "WALRUS"]
        ]]
      ]],
      ["Sequence", [
        ["Plain", [
          ["String", "ENDOFDATA"]
        ]]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["EndLine", "\n"],
  ["Comment", "Classes of Runes"],
  ["EndLine", "\n"],
  ["EndLine", "\n"],
  ["ClassDef", [
    ["ClassId", [
      ["ResClassId", "alpha"]
    ]],
    ["ClassExpr", [
      ["AlphaRange", [
        ["Letter", "A"],
        ["Letter", "Z"]
      ]],
      ["AlphaRange", [
        ["Letter", "a"],
        ["Letter", "z"]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["ClassDef", [
    ["ClassId", [
      ["ResClassId", "alphanum"]
    ]],
    ["ClassExpr", [
      ["AlphaRange", [
        ["Letter", "A"],
        ["Letter", "Z"]
      ]],
      ["AlphaRange", [
        ["Letter", "a"],
        ["Letter", "z"]
      ]],
      ["IntRange", [
        ["Integer", "0"],
        ["Integer", "9"]
      ]]
    ]]
  ]],
  ["EndLine", "\n"],
  ["ClassDef", [
    ["ClassId", [
      ["ResClassId", "any"]
    ]],
    ["ClassExpr", [
      ["BinRange", [
        ["Binary", "b0"],
        ["Binary", "b11111111"]
      ]]
    ]]
  ]],
  ["Comment", ". (any byte)"],
  ["EndLine", "\n"]
]]